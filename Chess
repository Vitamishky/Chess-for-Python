import pygame
from pygame.locals import *
import time


class Piece:
    def __init__(self, color, position):
        self.name
        self.position = position
        self.color = color
        self.opponent_color = 'b' if self.color == 'w' else 'w'
        self.direction = 1 if self.color == 'w' else -1
        self.has_moved = False
        self.turn_first_moved = 0

    def get_possible_moves(self, board):
        return []

    def can_move(self, move, board):
        return move in self.get_possible_moves(board)

    def move(self, move):
        self.position = move

    def is_opponent(self, piece):
        return piece.color == self.opponent_color

    def get_possible_straight_line_moves(self, board):
        moves = []
        curr_pos = self.position[0], self.position[1] + 1
        while curr_pos[1] <= 7:
            piece = board[curr_pos[0]][curr_pos[1]]
            if not piece:
                moves.append(curr_pos)
            elif self.is_opponent(piece):
                moves.append(curr_pos)
                break
            else:
                break
            curr_pos = curr_pos[0], curr_pos[1] + 1

        curr_pos = self.position[0], self.position[1] - 1
        while curr_pos[1] >= 0:
            piece = board[curr_pos[0]][curr_pos[1]]
            if not piece:
                moves.append(curr_pos)
            elif self.is_opponent(piece):
                moves.append(curr_pos)
                break
            else:
                break
            curr_pos = curr_pos[0], curr_pos[1] - 1

        curr_pos = self.position[0] + 1, self.position[1]
        while curr_pos[0] <= 7:
            piece = board[curr_pos[0]][curr_pos[1]]
            if not piece:
                moves.append(curr_pos)
            elif self.is_opponent(piece):
                moves.append(curr_pos)
                break
            else:
                break
            curr_pos = curr_pos[0] + 1, curr_pos[1]

        curr_pos = self.position[0] - 1, self.position[1]
        while curr_pos[0] >= 0:
            piece = board[curr_pos[0]][curr_pos[1]]
            if not piece:
                moves.append(curr_pos)
            elif self.is_opponent(piece):
                moves.append(curr_pos)
                break
            else:
                break
            curr_pos = curr_pos[0] - 1, curr_pos[1]

        return moves

    def get_possible_diagonal_moves(self, board):
        moves = []
        curr_pos = self.position[0] + 1, self.position[1] + 1
        while curr_pos[1] <= 7 and curr_pos[0] <= 7:
            piece = board[curr_pos[0]][curr_pos[1]]
            if not piece:
                moves.append(curr_pos)
            elif self.is_opponent(piece):
                moves.append(curr_pos)
                break
            else:
                break

            curr_pos = curr_pos[0] + 1, curr_pos[1] + 1
        curr_pos = self.position[0] + 1, self.position[1] - 1
        while curr_pos[1] >= 0 and curr_pos[0] <= 7:
            piece = board[curr_pos[0]][curr_pos[1]]
            if not piece:
                moves.append(curr_pos)
            elif self.is_opponent(piece):
                moves.append(curr_pos)
                break
            else:
                break

            curr_pos = curr_pos[0] + 1, curr_pos[1] - 1
        curr_pos = self.position[0] - 1, self.position[1] + 1
        while curr_pos[0] >= 0 and curr_pos[1] <= 7:
            piece = board[curr_pos[0]][curr_pos[1]]
            if not piece:
                moves.append(curr_pos)
            elif self.is_opponent(piece):
                moves.append(curr_pos)
                break
            else:
                break
            curr_pos = curr_pos[0] - 1, curr_pos[1] + 1
        curr_pos = self.position[0] - 1, self.position[1] - 1
        while curr_pos[1] >= 0 and curr_pos[0] >= 0:
            piece = board[curr_pos[0]][curr_pos[1]]
            if not piece:
                moves.append(curr_pos)
            elif self.is_opponent(piece):
                moves.append(curr_pos)
                break
            else:
                break
            curr_pos = curr_pos[0] - 1, curr_pos[1] - 1

        return moves


class Rook(Piece):
    def __init__(self, color, position):
        self.name = 'Rook'
        super(Rook, self).__init__(color, position)
        if self.color == 'w':
            self.image = 'images/wR.png'
        else:
            self.image = 'images/bR.png'
        self.value = 5

    def get_possible_moves(self, board):
        return self.get_possible_straight_line_moves(board)


class Queen(Piece):
    def __init__(self, color, position):
        self.name = 'Queen'
        super(Queen, self).__init__(color, position)
        if self.color == 'w':
            self.image = 'images/wQ.png'
        else:
            self.image = 'images/bQ.png'
        self.value = 9

    def get_possible_moves(self, board):
        return self.get_possible_straight_line_moves(board) + self.get_possible_diagonal_moves(board)


class Pawn(Piece):
    def __init__(self, color, position):
        self.name = 'Pawn'
        super(Pawn, self).__init__(color, position)
        if self.color == 'w':
            self.image = 'images/wP.png'
        else:
            self.image = 'images/bP.png'
        self.value = 1

    def get_possible_moves(self, board):
        moves = []
        if not self.is_piece_in_front(board):
            moves.append((self.position[0], self.position[1] + self.direction))
            if (not self.has_moved) and (not board[self.position[0]][self.position[1] + 2 * self.direction]):
                moves.append((self.position[0], self.position[1] + 2 * self.direction))
        if self.position[0] < 7:
            right_diagonal = board[self.position[0] + 1][self.position[1] + self.direction]
            if right_diagonal and self.is_opponent(right_diagonal):
                moves.append(right_diagonal.position)
        if self.position[0] > 0:
            left_diagonal = board[self.position[0] - 1][self.position[1] + self.direction]
            if left_diagonal and self.is_opponent(left_diagonal):
                moves.append(left_diagonal.position)
        return moves

    def is_piece_in_front(self, board):
        return board[self.position[0]][self.position[1] + self.direction]

    def is_opponent_piece_diagonal(self, board, left_side):
        side = -1 if left_side else 1
        return board[self.position[0] + side][self.position[1] + self.direction].color == self.opponent_color


class Knight(Piece):
    def __init__(self, color, position):
        self.name = 'Knight'
        super(Knight, self).__init__(color, position)
        if self.color == 'w':
            self.image = 'images/wKn.png'
        else:
            self.image = 'images/bKn.png'
        self.value = 3

    def get_possible_moves(self, board):
        poss_moves = [(1, 2), (2, 1), (-1, 2), (-2, 1), (2, -1), (1, -2), (-1, -2), (-2, -1)]
        moves = []
        for move in poss_moves:
            pos = self.position[0] + move[0], self.position[1] + move[1]
            if pos[0] < 0 or pos[0] > 7 or pos[1] < 0 or pos[1] > 7:
                continue
            piece = board[pos[0]][pos[1]]
            if not piece or self.is_opponent(piece):
                moves.append(pos)
        return moves


class King(Piece):
    def __init__(self, color, position):
        self.name = 'King'
        super(King, self).__init__(color, position)
        if self.color == 'w':
            self.image = 'images/wK.png'
        else:
            self.image = 'images/bK.png'
        self.value = 100

    def get_possible_moves(self, board):
        moves = []
        for i in range(-1, 2):
            for e in range(-1, 2):
                space = self.position[0] + e, self.position[1] + i
                if space[0] < 0 or space[0] > 7 or space[1] < 0 or space[1] > 7:
                    continue
                piece = board[space[0]][space[1]]
                if not piece or self.is_opponent(piece):
                    moves.append(space)
        return moves

    def is_opponent(self, piece):
        return piece.color == self.opponent_color


class Bishop(Piece):
    def __init__(self, color, position):
        self.name = 'Bishop'
        super(Bishop, self).__init__(color, position)
        if self.color == 'w':
            self.image = 'images/wB.png'
        else:
            self.image = 'images/bB.png'
        self.value = 3

    def get_possible_moves(self, board):
        return self.get_possible_diagonal_moves(board)


class ChessBoard:
    def __init__(self):
        self.board = [[None for _ in range(8)] for _ in range(8)]
        for i in range(8):
            self.board[i][1] = Pawn('w', (i, 1))
            self.board[i][6] = Pawn('b', (i, 6))
        self.board[0][7] = Rook('b', (0, 7))
        self.board[7][7] = Rook('b', (7, 7))
        self.board[1][7] = Knight('b', (1, 7))
        self.board[6][7] = Knight('b', (6, 7))
        self.board[2][7] = Bishop('b', (2, 7))
        self.board[5][7] = Bishop('b', (5, 7))
        self.board[4][7] = King('b', (4, 7))
        self.board[3][7] = Queen('b', (3, 7))
        self.board[0][0] = Rook('w', (0, 0))
        self.board[7][0] = Rook('w', (7, 0))
        self.board[1][0] = Knight('w', (1, 0))
        self.board[6][0] = Knight('w', (6, 0))
        self.board[2][0] = Bishop('w', (2, 0))
        self.board[5][0] = Bishop('w', (5, 0))
        self.board[4][0] = King('w', (4, 0))
        self.board[3][0] = Queen('w', (3, 0))
        self.curr_player = 'w'
        self.played_moves = []

    def get_all_pieces(self):
        pieces = []
        for x in range(8):
            for y in range(8):
                if self.board[x][y]:
                    pieces.append(self.board[x][y])
        return pieces

    def get_curr_player_pieces(self):
        pieces = []
        for piece in self.get_all_pieces():
            if piece.color == self.curr_player:
                pieces.append(piece)
        return pieces

    def get_poss_moves_for(self, piece):
        if piece.name != 'King':
            return piece.get_possible_moves(self.board)
        else:
            return piece.get_possible_moves(self.board) + self.get_castle_moves_for_curr_player()

    def get_piece_at(self, space):
        return self.board[space[0]][space[1]]

    def get_type_pieces_of_player(self, piece_name, player):
        pieces = []
        for row in self.board:
            for space in row:
                if space and space.name == piece_name and space.color == player:
                    pieces.append(space)
        return pieces

    def move_piece(self, piece, new_position):
        pos = piece.position
        piece_to_take = self.board[new_position[0]][new_position[1]]
        piece.move(new_position)
        self.board[new_position[0]][new_position[1]] = piece
        self.board[pos[0]][pos[1]] = None
        if not piece.has_moved:
            piece.has_moved = True
        if piece_to_take:
            return piece_to_take
        return None

    def non_permanent_move(self, piece, new_position):
        pos = piece.position
        piece.move(new_position)
        self.board[new_position[0]][new_position[1]] = piece
        self.board[pos[0]][pos[1]] = None

    def get_castle_moves_for_curr_player(self):
        castles = []
        king = self.get_type_pieces_of_player('King', self.curr_player)[0]
        y = 0 if self.curr_player == 'w' else 7
        b = self.board
        if b[0][y] and not b[0][y].has_moved and b[4][y] and not b[4][y].has_moved:
            if all(not b[x][y] for x in range(1, 4)):
                if not self.king_in_check(king, self.board):
                    castles.append((2, y))

        if b[7][y] and not b[7][y].has_moved and b[4][y] and not b[4][y].has_moved:
            if all(not b[x][y] for x in range(5, 7)):
                if not self.king_in_check(king, self.board):
                    castles.append((6, y))
        for move in castles:
            self.non_permanent_castle_king(king, move)
            if self.king_in_check(king, self.board):
                castles.remove(move)
            self.uncastle_king(king)
        return castles

    def castle_king(self, king, new_king_position):
        corresponding_rook = {(2, 0): (0, 0), (6, 0): (7, 0), (2, 7): (0, 7), (6, 7): (7, 7)}
        corresponding_rook_move = {(2, 0): (3, 0), (6, 0): (5, 0), (2, 7): (3, 7), (6, 7): (5, 7)}
        rook_pos = corresponding_rook[new_king_position]
        rook = self.board[rook_pos[0]][rook_pos[1]]
        self.move_piece(king, new_king_position)
        self.move_piece(rook, corresponding_rook_move[new_king_position])

    def non_permanent_castle_king(self, king, new_king_position):
        corresponding_rook = {(2, 0): (0, 0), (6, 0): (7, 0), (2, 7): (0, 7), (6, 7): (7, 7)}
        corresponding_rook_move = {(2, 0): (3, 0), (6, 0): (5, 0), (2, 7): (3, 7), (6, 7): (5, 7)}
        rook_pos = corresponding_rook[new_king_position]
        rook = self.board[rook_pos[0]][rook_pos[1]]
        self.non_permanent_move(king, new_king_position)
        self.non_permanent_move(rook, corresponding_rook_move[new_king_position])

    def uncastle_king(self, king):
        corresponding_rook = {(2, 0): (3, 0), (6, 0): (5, 0), (2, 7): (3, 7), (6, 7): (5, 7)}
        corresponding_rook_move = {(2, 0): (0, 0), (6, 0): (7, 0), (2, 7): (0, 7), (6, 7): (7, 7)}
        rook_pos = corresponding_rook[king.position]
        rook = self.board[rook_pos[0]][rook_pos[1]]
        self.non_permanent_move(rook, corresponding_rook_move[king.position])
        self.non_permanent_move(king, (4, king.position[1]))

    def king_in_check(self, king, b):
        for m in king.get_possible_diagonal_moves(b):
            if b[m[0]][m[1]] and b[m[0]][m[1]].name in ['Bishop', 'Queen']:
                return True
        for m in king.get_possible_straight_line_moves(b):
            if b[m[0]][m[1]] and b[m[0]][m[1]].name in ['Rook', 'Queen']:
                return True
        for m in king.get_possible_moves(b):
            if b[m[0]][m[1]] and b[m[0]][m[1]].name == 'King':
                return True
        for m in [(1, 2), (2, 1), (-1, 2), (-2, 1), (2, -1), (1, -2), (-1, -2), (-2, -1)]:
            pos = king.position[0] + m[0], king.position[1] + m[1]
            if pos[0] < 0 or pos[0] > 7 or pos[1] < 0 or pos[1] > 7:
                continue
            if b[pos[0]][pos[1]] and b[pos[0]][pos[1]].name == 'Knight' and b[pos[0]][pos[1]].color != self.curr_player:
                return True
        y_dir = 1 if self.curr_player == 'w' else -1
        l_diag = king.position[0] - 1, king.position[1] + y_dir
        r_diag = king.position[0] + 1, king.position[1] + y_dir
        if l_diag[0] >= 0:
            if b[l_diag[0]][l_diag[1]] and b[l_diag[0]][l_diag[1]].name == 'Pawn' \
                    and b[l_diag[0]][l_diag[1]].color != self.curr_player:
                return True
        if r_diag[0] <= 7:
            if b[r_diag[0]][r_diag[1]] and b[r_diag[0]][r_diag[1]].name == 'Pawn' \
                    and b[r_diag[0]][r_diag[1]].color != self.curr_player:
                return True

    def is_curr_player_in_check(self, piece, moves):
        king = self.get_type_pieces_of_player('King', self.curr_player)[0]
        b = self.board
        piece_original_pos = piece.position
        poss_moves = []
        for move in moves:
            piece_at_move_pos = self.board[move[0]][move[1]]
            self.non_permanent_move(piece, move)
            if not self.king_in_check(king, b):
                poss_moves.append(move)
            self.non_permanent_move(piece, piece_original_pos)
            self.board[move[0]][move[1]] = piece_at_move_pos
        return poss_moves


class Game:
    def __init__(self):
        pygame.init()
        self.game_display = pygame.display.set_mode((900, 605))
        pygame.display.set_caption('Finally it`s working')
        self.settings = {'board_image': 'images/grass_board.jpg'}
        self.board_image = pygame.image.load(self.settings['board_image'])
        self.chess_board = ChessBoard()
        self.curr_selected_piece = None
        self.curr_poss_moves = []
        self.all_poss_moves = self.get_all_poss_moves()
        self.white_pieces_taken_images = []
        self.black_pieces_taken_images = []
        self.play_game()

    def play_game(self):
        while True:
            self.draw_window()
            for event in pygame.event.get():
                if event.type == pygame.QUIT:
                    quit()
                if event.type == pygame.MOUSEBUTTONUP:
                    self.get_user_click()

    def draw_window(self):
        self.game_display.fill((255,255,255))
        self.draw_side_menu()
        self.draw_board()
        pygame.display.flip()

    def draw_side_menu(self):
        if self.chess_board.curr_player == 'b':
            pygame.draw.rect(self.game_display, (34, 0, 255), Rect((700, 25), (100, 50)), 5)
        else:
            pygame.draw.rect(self.game_display, (34, 0, 255), Rect((700, 525), (100, 50)), 5)
        self.message_display('Black', (750, 50), fontsize=30)
        self.message_display('White', (750, 550), fontsize=30)

    def draw_board(self):
        self.game_display.blit(self.board_image, (0, 0))
        for piece in self.chess_board.get_all_pieces():
            image_position = piece.position
            image_position = image_position[0] * 75, (7 - image_position[1]) * 75
            piece_image = pygame.image.load(piece.image)
            self.game_display.blit(piece_image, image_position)
        if self.curr_selected_piece:
            box_x, box_y = self.convert_space_to_coordinates(self.curr_selected_piece.position)
            pygame.draw.rect(self.game_display, (34, 0, 255), Rect((box_x, box_y), (75, 75)), 5)
            for move in self.curr_poss_moves:
                box1_x, box1_y = self.convert_space_to_coordinates(move)
                pygame.draw.rect(self.game_display, (209, 9, 9), Rect((box1_x, box1_y), (75, 75)), 5)

    def get_user_click(self):
        x, y = pygame.mouse.get_pos()
        selected_space = self.convert_coordinates_to_space(x, y)
        if not self.curr_selected_piece:
            if self.is_piece_of_curr_player(selected_space):
                self.new_piece_selected(selected_space)
        else:
            if selected_space == self.curr_selected_piece.position:
                self.deselect_piece()
            elif selected_space in self.curr_poss_moves:
                if self.curr_selected_piece.name == 'King' \
                        and selected_space in self.chess_board.get_castle_moves_for_curr_player():
                        self.add_move(self.curr_selected_piece.position, selected_space)
                        self.chess_board.castle_king(self.curr_selected_piece, selected_space)
                else:
                    self.add_move(self.curr_selected_piece.position, selected_space)
                    self.move_piece(self.curr_selected_piece, selected_space)
                    if self.curr_selected_piece.name == 'Pawn' and selected_space[1] == 0 or selected_space[1] == 7:
                        self.chess_board.board[selected_space[0]][selected_space[1]] = None
                        self.chess_board.board[selected_space[0]][selected_space[1]] \
                            = Queen(self.chess_board.curr_player, selected_space)
                self.deselect_piece()
                self.change_curr_player()
                self.all_poss_moves = self.get_all_poss_moves()
                checkmate = True
                for piece_pos in self.all_poss_moves:
                    if len(self.all_poss_moves[piece_pos]) != 0:
                        checkmate = False
                if checkmate:
                    self.draw_window()
                    self.message_display('Checkmate!', (400, 300))
                    winner = 'White' if self.chess_board.curr_player == 'b' else 'Black'
                    self.message_display('%s wins!' % winner, (400, 400))
                    pygame.display.update()
                    time.sleep(2)
                    quit()
            elif selected_space in [piece.position for piece in self.chess_board.get_curr_player_pieces()]:
                self.new_piece_selected(selected_space)
            else:
                self.deselect_piece()

    def convert_coordinates_to_space(self, x, y):
        return x // 75, 7 - y // 75

    def convert_space_to_coordinates(self, position):
        return position[0] * 75, (7 - position[1]) * 75

    def is_piece_of_curr_player(self, space):
        for piece in self.chess_board.get_curr_player_pieces():
            if space == piece.position and piece.position != 'None':
                return True

    def get_all_poss_moves(self):
        moves = {}
        pieces = self.chess_board.get_curr_player_pieces()
        for piece in pieces:
            p_moves = self.chess_board.get_poss_moves_for(piece)
            moves[piece.position] = self.chess_board.is_curr_player_in_check(piece, p_moves)
        return moves

    def get_curr_poss_moves(self):
        return self.all_poss_moves[self.curr_selected_piece.position]

    def move_piece(self, piece, new_position):
        piece_captured = self.chess_board.move_piece(piece, new_position)
        if piece_captured:
            self.piece_was_captured(piece_captured)

    def change_curr_player(self):
        self.chess_board.curr_player = 'w' if self.chess_board.curr_player == 'b' else 'b'

    def new_piece_selected(self, new_space):
        self.curr_selected_piece = self.chess_board.get_piece_at(new_space)
        self.curr_poss_moves = self.get_curr_poss_moves()

    def deselect_piece(self):
        self.curr_selected_piece = None
        self.curr_poss_moves = None

    def add_move(self, pos_1, pos_2):
        name = self.chess_board.curr_player.upper() + ':     '
        move = name + self.convert_coordinate_to_space_name(pos_1) + ' -> ' + self.convert_coordinate_to_space_name(pos_2)
        self.chess_board.played_moves.append(move)

    def convert_coordinate_to_space_name(self, coordinate):
        conversions = {0 : 'A', 1: 'B', 2: 'C', 3: 'D', 4: 'E', 5: 'F', 6: 'G', 7: 'H'}
        return str(conversions[coordinate[0]]) + str(coordinate[1] + 1)

    def piece_was_captured(self, piece):
        if piece.color == 'w':
            self.white_pieces_taken_images.append(piece.image)
        else:
            self.black_pieces_taken_images.append(piece.image)

    def message_display(self, text, point, fontsize=90):
        text_rect = pygame.font.Font('freesansbold.ttf', fontsize).render(text, True, (100, 100, 100)).get_rect()
        text_rect.center = (point)
        self.game_display.blit(pygame.font.Font('freesansbold.ttf', fontsize).render(text, True, (0, 0, 0)), text_rect)

Game()
